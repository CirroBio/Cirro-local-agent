plugins {
    id "jacoco"
    id "org.sonarqube" version "4.2.1.3168"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "io.micronaut.application" version "4.4.2"
    id 'org.cyclonedx.bom' version '1.7.2'
}

version = "0.1"
group = "bio.cirro"

repositories {
    mavenCentral()
}

def buildVersion = System.getenv("BUILD_VERSION") ?: "edge"

import org.apache.tools.ant.filters.ReplaceTokens

import java.time.Instant

processResources {
    filter ReplaceTokens, tokens: [
            "BUILD_VERSION": buildVersion
    ]
}

tasks.named("dockerfileNative") {
    instruction """
ENV BUILD_VERSION=${buildVersion}
LABEL org.opencontainers.image.source "https://github.com/CirroBio/Cirro-local-agent"
LABEL org.opencontainers.image.vendor "Cirro Bio"
LABEL org.opencontainers.image.authors "Cirro Bio"
LABEL org.opencontainers.image.version "${buildVersion}"
LABEL org.opencontainers.image.title "Cirro Agent"
LABEL org.opencontainers.image.description "Cirro Agent is a daemon that runs on a local HPC environment."
LABEL org.opencontainers.image.url "https://github.com/CirroBio/Cirro-local-agent"
LABEL org.opencontainers.image.created "${Instant.now().toString()}"
    """
}

cyclonedxBom {
    includeConfigs = ["runtimeClasspath"]
    skipConfigs = ["compileClasspath", "testCompileClasspath"]
    projectType = "application"
    schemaVersion = "1.4"
    destination = file("build/reports")
    outputName = "CycloneDX-Sbom"
    outputFormat = "all"
    includeBomSerialNumber = true
    componentVersion = "2.0.0"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = false
        csv.required = false
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    annotationProcessor "info.picocli:picocli-codegen"
    annotationProcessor "io.micronaut.serde:micronaut-serde-processor"
    annotationProcessor "io.micronaut.validation:micronaut-validation-processor"

    implementation "info.picocli:picocli"
    implementation "io.micronaut.picocli:micronaut-picocli"
    implementation "io.micronaut.serde:micronaut-serde-jackson"
    implementation "io.micronaut.validation:micronaut-validation"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation 'io.micronaut:micronaut-websocket'
    implementation "io.micronaut.reactor:micronaut-reactor"
    implementation 'com.auth0:java-jwt:4.4.0'
    implementation "software.amazon.awssdk:http-auth-aws:${awsSdkVersion}"
    implementation "software.amazon.awssdk:auth:${awsSdkVersion}"
    implementation "software.amazon.awssdk:sts:${awsSdkVersion}"
    implementation "software.amazon.awssdk:sso:${awsSdkVersion}"
    implementation "software.amazon.awssdk:ssooidc:${awsSdkVersion}"
    implementation "software.amazon.awssdk:arns:${awsSdkVersion}"
    implementation "software.amazon.awssdk:iam-policy-builder:${awsSdkVersion}"
    implementation 'org.apache.commons:commons-text:1.12.0'
    runtimeOnly "ch.qos.logback:logback-classic"
    runtimeOnly "org.yaml:snakeyaml"

    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation "org.mockito:mockito-core:3.+"
}

application {
    mainClass = "bio.cirro.agent.AgentCommand"
}

java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}

micronaut {
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("bio.cirro.*")
    }
}

graalvmNative {
    binaries {
        main {
            imageName.set('cirro-agent')
            buildArgs.add('--verbose')
        }
    }
}

sonar {
    properties {
        property "sonar.projectKey", "CirroBio_Cirro-local-agent"
        property "sonar.organization", "cirrobio"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.coveragePlugin", "jacoco"
    }
}
