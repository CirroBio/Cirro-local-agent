
backend {
    default: "SLURM"
    providers {
        SLURM {
            actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
            config {
                glob-link-command = "ln -sL GLOB_PATTERN GLOB_DIRECTORY"
                concurrent-job-limit = 5000
                runtime-attributes = """
                    Int cpu = 1
                    String? walltime
                    Int memory_mb = 2000
                    String apptainerVersion = "1.1.6"
                    String? docker
                    String? modules = ""
                    String priority = 5
                """

                kill = "scancel ${job_id}"
                kill-docker = "scancel ${job_id}"
                check-alive = "squeue -j ${job_id}"
                job-id-regex = "Submitted batch job (\\d+).*"

                submit = """
                    set -e
                    echo "Submitting non-containerized tasks not supported"
                    exit 1
                """

                submit-docker = """
                    set -e

                    # Normalize the docker image name to a valid filename
                    IMAGE_NAME=$(sed -e 's/[^A-Za-z0-9._-]/_/g' <<< ${docker})
                    IMAGE=$APPTAINER_CACHEDIR/$IMAGE_NAME.sif

                    # Pull image if it doesn't exist
                    if [ ! -f $IMAGE ]; then
                        apptainer pull $IMAGE docker://${docker}
                    fi

                    sbatch \
                        --partition $HEADNODE_JOB_QUEUE \
                        --account $HEADNODE_ACCOUNTING \
                        --job-name ${job_name} \
                        --chdir ${cwd} \
                        --output ${out} \
                        --error ${err} \
                        --priority ${priority} \
                        --cpus-per-task=${cpu} \
                        ${"--time=" + walltime} \
                        --wrap "env - PATH="$PATH" apptainer exec --containall --env TMPDIR=\$TMPDIR --bind \$TMPDIR --workdir \$TMPDIR --bind ${cwd}:${docker_cwd} $IMAGE ${job_shell} ${docker_script}"
                """

                filesystems {
                    local {
                        localization: ["soft-link", "copy"]
                        caching {
                            duplication-strategy: [
                                "soft-link", "copy"
                            ]
                            hashing-strategy: "path+modtime"

                            # When true, will check if a sibling file with the same name and the .md5 extension exists, and if it does, use the content of this file as a hash.
                            # If false or the md5 does not exist, will proceed with the above-defined hashing strategy.
                            # Default: false
                            check-sibling-md5: false
                        }
                    }
                    s3 {
                        auth: "default"
                    }
                }
            }
        }
    }
}
